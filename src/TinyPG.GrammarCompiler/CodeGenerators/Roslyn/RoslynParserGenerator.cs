using System;
using System.Linq;
using TinyPG.Compiler;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace TinyPG.CodeGenerators.Roslyn;

public class RoslynParserGenerator : ICodeGenerator
{
    public string FileName { get; set; }

    public string Generate(Grammar grammar, bool debug)
    {
        var tree = SyntaxTree(
            CompilationUnit()
                .WithUsings(
                    List<UsingDirectiveSyntax>(
                        new UsingDirectiveSyntax[]
                        {
                            UsingDirective(
                                    IdentifierName("System"))
                                .WithUsingKeyword(
                                    Token(
                                        TriviaList(
                                            Comment("// Generated by TinyPG v1.3 available at www.codeproject.com")),
                                        SyntaxKind.UsingKeyword,
                                        TriviaList())),
                            UsingDirective(
                                QualifiedName(
                                    QualifiedName(
                                        IdentifierName("System"),
                                        IdentifierName("Collections")),
                                    IdentifierName("Generic")))
                        }))
                .WithMembers(
                    SingletonList<MemberDeclarationSyntax>(
                        NamespaceDeclaration(
                                IdentifierName(
                                    MissingToken(SyntaxKind.IdentifierToken)))
                            .WithNamespaceKeyword(
                                Token(
                                    TriviaList(
                                        new[]
                                        {
                                            Comment("// Disable unused variable warnings which"),
                                            Comment("// can happen during the parser generation."),
                                            Trivia(
                                                PragmaWarningDirectiveTrivia(
                                                        Token(SyntaxKind.DisableKeyword),
                                                        true)
                                                    .WithErrorCodes(
                                                        SingletonSeparatedList<ExpressionSyntax>(
                                                            LiteralExpression(
                                                                SyntaxKind.NumericLiteralExpression,
                                                                Literal(168)))))
                                        }),
                                    SyntaxKind.NamespaceKeyword,
                                    TriviaList()))
                            .WithOpenBraceToken(
                                MissingToken(
                                    TriviaList(),
                                    SyntaxKind.OpenBraceToken,
                                    TriviaList(
                                        new[]
                                        {
                                            Trivia(
                                                SkippedTokensTrivia()
                                                    .WithTokens(
                                                        TokenList(
                                                            Token(SyntaxKind.LessThanToken)))),
                                            Trivia(
                                                SkippedTokensTrivia()
                                                    .WithTokens(
                                                        TokenList(
                                                            Token(SyntaxKind.PercentToken)))),
                                            Trivia(
                                                SkippedTokensTrivia()
                                                    .WithTokens(
                                                        TokenList(
                                                            Identifier("Namespace")))),
                                            Trivia(
                                                SkippedTokensTrivia()
                                                    .WithTokens(
                                                        TokenList(
                                                            Token(SyntaxKind.PercentToken)))),
                                            Trivia(
                                                SkippedTokensTrivia()
                                                    .WithTokens(
                                                        TokenList(
                                                            Token(SyntaxKind.GreaterThanToken)))),
                                            Trivia(
                                                SkippedTokensTrivia()
                                                    .WithTokens(
                                                        TokenList(
                                                            Token(SyntaxKind.OpenBraceToken))))
                                        })))
                            .WithMembers(
                                SingletonList<MemberDeclarationSyntax>(
                                    ClassDeclaration("Parser")
                                        .WithModifiers(
                                            TokenList(
                                                new[]
                                                {
                                                    Token(
                                                        TriviaList(
                                                            Trivia(
                                                                RegionDirectiveTrivia(
                                                                        true)
                                                                    .WithEndOfDirectiveToken(
                                                                        Token(
                                                                            TriviaList(
                                                                                PreprocessingMessage("Parser")),
                                                                            SyntaxKind.EndOfDirectiveToken,
                                                                            TriviaList())))),
                                                        SyntaxKind.PublicKeyword,
                                                        TriviaList()),
                                                    Token(SyntaxKind.PartialKeyword)
                                                }))
                                        .WithTypeParameterList(
                                            TypeParameterList(
                                                SingletonSeparatedList<TypeParameterSyntax>(
                                                    TypeParameter(
                                                        MissingToken(
                                                            TriviaList(),
                                                            SyntaxKind.IdentifierToken,
                                                            TriviaList(
                                                                new[]
                                                                {
                                                                    Trivia(
                                                                        SkippedTokensTrivia()
                                                                            .WithTokens(
                                                                                TokenList(
                                                                                    Token(SyntaxKind.PercentToken)))),
                                                                    Trivia(
                                                                        SkippedTokensTrivia()
                                                                            .WithTokens(
                                                                                TokenList(
                                                                                    Identifier("IParser")))),
                                                                    Trivia(
                                                                        SkippedTokensTrivia()
                                                                            .WithTokens(
                                                                                TokenList(
                                                                                    Token(SyntaxKind.PercentToken))))
                                                                }))))))
                                        .WithMembers(
                                            List<MemberDeclarationSyntax>(
                                                new MemberDeclarationSyntax[]
                                                {
                                                    FieldDeclaration(
                                                            VariableDeclaration(
                                                                    IdentifierName("Scanner"))
                                                                .WithVariables(
                                                                    SingletonSeparatedList<VariableDeclaratorSyntax>(
                                                                        VariableDeclarator(
                                                                            Identifier("scanner")))))
                                                        .WithModifiers(
                                                            TokenList(
                                                                Token(SyntaxKind.PrivateKeyword))),
                                                    FieldDeclaration(
                                                            VariableDeclaration(
                                                                    IdentifierName("ParseTree"))
                                                                .WithVariables(
                                                                    SingletonSeparatedList<VariableDeclaratorSyntax>(
                                                                        VariableDeclarator(
                                                                            Identifier("tree")))))
                                                        .WithModifiers(
                                                            TokenList(
                                                                Token(SyntaxKind.PrivateKeyword))),
                                                    ConstructorDeclaration(
                                                            Identifier("Parser"))
                                                        .WithModifiers(
                                                            TokenList(
                                                                Token(SyntaxKind.PublicKeyword)))
                                                        .WithParameterList(
                                                            ParameterList(
                                                                SingletonSeparatedList<ParameterSyntax>(
                                                                    Parameter(
                                                                            Identifier("scanner"))
                                                                        .WithType(
                                                                            IdentifierName("Scanner")))))
                                                        .WithBody(
                                                            Block(
                                                                SingletonList<StatementSyntax>(
                                                                    ExpressionStatement(
                                                                        AssignmentExpression(
                                                                            SyntaxKind.SimpleAssignmentExpression,
                                                                            MemberAccessExpression(
                                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                                ThisExpression(),
                                                                                IdentifierName("scanner")),
                                                                            IdentifierName("scanner")))))),
                                                    IncompleteMember()
                                                        .WithModifiers(
                                                            TokenList(
                                                                Token(
                                                                    TriviaList(),
                                                                    SyntaxKind.PublicKeyword,
                                                                    TriviaList(
                                                                        new[]
                                                                        {
                                                                            Trivia(
                                                                                SkippedTokensTrivia()
                                                                                    .WithTokens(
                                                                                        TokenList(
                                                                                            Token(SyntaxKind
                                                                                                .LessThanToken)))),
                                                                            Trivia(
                                                                                SkippedTokensTrivia()
                                                                                    .WithTokens(
                                                                                        TokenList(
                                                                                            Token(SyntaxKind
                                                                                                .PercentToken))))
                                                                        })))),
                                                    IncompleteMember(
                                                        IdentifierName(
                                                            Identifier(
                                                                TriviaList(),
                                                                "IParseTree",
                                                                TriviaList(
                                                                    new[]
                                                                    {
                                                                        Trivia(
                                                                            SkippedTokensTrivia()
                                                                                .WithTokens(
                                                                                    TokenList(
                                                                                        Token(SyntaxKind
                                                                                            .PercentToken)))),
                                                                        Trivia(
                                                                            SkippedTokensTrivia()
                                                                                .WithTokens(
                                                                                    TokenList(
                                                                                        Token(SyntaxKind
                                                                                            .GreaterThanToken))))
                                                                    })))),
                                                    ConstructorDeclaration(
                                                            Identifier("Parse"))
                                                        .WithParameterList(
                                                            ParameterList(
                                                                SingletonSeparatedList<ParameterSyntax>(
                                                                    Parameter(
                                                                            Identifier("input"))
                                                                        .WithType(
                                                                            PredefinedType(
                                                                                Token(SyntaxKind.StringKeyword))))))
                                                        .WithBody(
                                                            Block(
                                                                SingletonList<StatementSyntax>(
                                                                    ReturnStatement(
                                                                        InvocationExpression(
                                                                                IdentifierName("Parse"))
                                                                            .WithArgumentList(
                                                                                ArgumentList(
                                                                                    SeparatedList<ArgumentSyntax>(
                                                                                        new SyntaxNodeOrToken[]
                                                                                        {
                                                                                            Argument(
                                                                                                IdentifierName(
                                                                                                    "input")),
                                                                                            Token(SyntaxKind
                                                                                                .CommaToken),
                                                                                            Argument(
                                                                                                LiteralExpression(
                                                                                                    SyntaxKind
                                                                                                        .StringLiteralExpression,
                                                                                                    Literal(""))),
                                                                                            Token(SyntaxKind
                                                                                                .CommaToken),
                                                                                            Argument(
                                                                                                ObjectCreationExpression(
                                                                                                        IdentifierName(
                                                                                                            "ParseTree"))
                                                                                                    .WithArgumentList(
                                                                                                        ArgumentList()))
                                                                                        }))))))),
                                                    IncompleteMember()
                                                        .WithModifiers(
                                                            TokenList(
                                                                Token(
                                                                    TriviaList(),
                                                                    SyntaxKind.PublicKeyword,
                                                                    TriviaList(
                                                                        new[]
                                                                        {
                                                                            Trivia(
                                                                                SkippedTokensTrivia()
                                                                                    .WithTokens(
                                                                                        TokenList(
                                                                                            Token(SyntaxKind
                                                                                                .LessThanToken)))),
                                                                            Trivia(
                                                                                SkippedTokensTrivia()
                                                                                    .WithTokens(
                                                                                        TokenList(
                                                                                            Token(SyntaxKind
                                                                                                .PercentToken))))
                                                                        })))),
                                                    IncompleteMember(
                                                        IdentifierName(
                                                            Identifier(
                                                                TriviaList(),
                                                                "IParseTree",
                                                                TriviaList(
                                                                    new[]
                                                                    {
                                                                        Trivia(
                                                                            SkippedTokensTrivia()
                                                                                .WithTokens(
                                                                                    TokenList(
                                                                                        Token(SyntaxKind
                                                                                            .PercentToken)))),
                                                                        Trivia(
                                                                            SkippedTokensTrivia()
                                                                                .WithTokens(
                                                                                    TokenList(
                                                                                        Token(SyntaxKind
                                                                                            .GreaterThanToken))))
                                                                    })))),
                                                    ConstructorDeclaration(
                                                            Identifier("Parse"))
                                                        .WithParameterList(
                                                            ParameterList(
                                                                SeparatedList<ParameterSyntax>(
                                                                    new SyntaxNodeOrToken[]
                                                                    {
                                                                        Parameter(
                                                                                Identifier("input"))
                                                                            .WithType(
                                                                                PredefinedType(
                                                                                    Token(SyntaxKind.StringKeyword))),
                                                                        Token(SyntaxKind.CommaToken),
                                                                        Parameter(
                                                                                Identifier("fileName"))
                                                                            .WithType(
                                                                                PredefinedType(
                                                                                    Token(SyntaxKind.StringKeyword)))
                                                                    })))
                                                        .WithBody(
                                                            Block(
                                                                SingletonList<StatementSyntax>(
                                                                    ReturnStatement(
                                                                        InvocationExpression(
                                                                                IdentifierName("Parse"))
                                                                            .WithArgumentList(
                                                                                ArgumentList(
                                                                                    SeparatedList<ArgumentSyntax>(
                                                                                        new SyntaxNodeOrToken[]
                                                                                        {
                                                                                            Argument(
                                                                                                IdentifierName(
                                                                                                    "input")),
                                                                                            Token(SyntaxKind
                                                                                                .CommaToken),
                                                                                            Argument(
                                                                                                IdentifierName(
                                                                                                    "fileName")),
                                                                                            Token(SyntaxKind
                                                                                                .CommaToken),
                                                                                            Argument(
                                                                                                ObjectCreationExpression(
                                                                                                        IdentifierName(
                                                                                                            "ParseTree"))
                                                                                                    .WithArgumentList(
                                                                                                        ArgumentList()))
                                                                                        }))))))),
                                                    IncompleteMember()
                                                        .WithModifiers(
                                                            TokenList(
                                                                Token(
                                                                    TriviaList(),
                                                                    SyntaxKind.PublicKeyword,
                                                                    TriviaList(
                                                                        new[]
                                                                        {
                                                                            Trivia(
                                                                                SkippedTokensTrivia()
                                                                                    .WithTokens(
                                                                                        TokenList(
                                                                                            Token(SyntaxKind
                                                                                                .LessThanToken)))),
                                                                            Trivia(
                                                                                SkippedTokensTrivia()
                                                                                    .WithTokens(
                                                                                        TokenList(
                                                                                            Token(SyntaxKind
                                                                                                .PercentToken))))
                                                                        })))),
                                                    IncompleteMember(
                                                        IdentifierName(
                                                            Identifier(
                                                                TriviaList(),
                                                                "IParseTree",
                                                                TriviaList(
                                                                    new[]
                                                                    {
                                                                        Trivia(
                                                                            SkippedTokensTrivia()
                                                                                .WithTokens(
                                                                                    TokenList(
                                                                                        Token(SyntaxKind
                                                                                            .PercentToken)))),
                                                                        Trivia(
                                                                            SkippedTokensTrivia()
                                                                                .WithTokens(
                                                                                    TokenList(
                                                                                        Token(SyntaxKind
                                                                                            .GreaterThanToken))))
                                                                    })))),
                                                    ConstructorDeclaration(
                                                            Identifier("Parse"))
                                                        .WithParameterList(
                                                            ParameterList(
                                                                SeparatedList<ParameterSyntax>(
                                                                    new SyntaxNodeOrToken[]
                                                                    {
                                                                        Parameter(
                                                                                Identifier("input"))
                                                                            .WithType(
                                                                                PredefinedType(
                                                                                    Token(SyntaxKind.StringKeyword))),
                                                                        Token(SyntaxKind.CommaToken),
                                                                        Parameter(
                                                                                Identifier("fileName"))
                                                                            .WithType(
                                                                                PredefinedType(
                                                                                    Token(SyntaxKind.StringKeyword))),
                                                                        Token(SyntaxKind.CommaToken),
                                                                        Parameter(
                                                                                Identifier("tree"))
                                                                            .WithType(
                                                                                IdentifierName("ParseTree"))
                                                                    })))
                                                        .WithBody(
                                                            Block(
                                                                ExpressionStatement(
                                                                    InvocationExpression(
                                                                            MemberAccessExpression(
                                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                                IdentifierName("scanner"),
                                                                                IdentifierName("Init")))
                                                                        .WithArgumentList(
                                                                            ArgumentList(
                                                                                SeparatedList<ArgumentSyntax>(
                                                                                    new SyntaxNodeOrToken[]
                                                                                    {
                                                                                        Argument(
                                                                                            IdentifierName("input")),
                                                                                        Token(SyntaxKind.CommaToken),
                                                                                        Argument(
                                                                                            IdentifierName("fileName"))
                                                                                    })))),
                                                                ExpressionStatement(
                                                                    AssignmentExpression(
                                                                        SyntaxKind.SimpleAssignmentExpression,
                                                                        MemberAccessExpression(
                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                            ThisExpression(),
                                                                            IdentifierName("tree")),
                                                                        IdentifierName("tree"))),
                                                                ExpressionStatement(
                                                                    InvocationExpression(
                                                                            IdentifierName("ParseStart"))
                                                                        .WithArgumentList(
                                                                            ArgumentList(
                                                                                SingletonSeparatedList<ArgumentSyntax>(
                                                                                    Argument(
                                                                                        IdentifierName("tree")))))),
                                                                ExpressionStatement(
                                                                    AssignmentExpression(
                                                                        SyntaxKind.SimpleAssignmentExpression,
                                                                        MemberAccessExpression(
                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                            IdentifierName("tree"),
                                                                            IdentifierName("Skipped")),
                                                                        MemberAccessExpression(
                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                            IdentifierName("scanner"),
                                                                            IdentifierName("Skipped")))),
                                                                ReturnStatement(
                                                                    IdentifierName("tree"))))
                                                }))))
                            .WithCloseBraceToken(
                                Token(
                                    TriviaList(
                                        Trivia(
                                            EndRegionDirectiveTrivia(
                                                    true)
                                                .WithEndOfDirectiveToken(
                                                    Token(
                                                        TriviaList(
                                                            PreprocessingMessage("Parser")),
                                                        SyntaxKind.EndOfDirectiveToken,
                                                        TriviaList())))),
                                    SyntaxKind.CloseBraceToken,
                                    TriviaList()))))
                .NormalizeWhitespace()
//END
        );

        var refApis = AppDomain.CurrentDomain.GetAssemblies()
            .Where(a => !a.IsDynamic)
            .Select(a => MetadataReference.CreateFromFile(a.Location));

        var cscompilation = CSharpCompilation.Create("something", new[] {tree}, refApis);
        string text = tree.GetRoot().ToFullString();
        Console.WriteLine(text);
        
        var diag = cscompilation.GetDiagnostics().Where(e => e.Severity == DiagnosticSeverity.Error).ToList();

        foreach (var d in diag)
        {
            Console.WriteLine(d);
        }

        return text;
    }
}